ПОДКЛЮЧЕНИЕ К БД
public partial class DBMechanicEntities : DbContext
{
    private static DBMechanicEntities _context;
    public DBMechanicEntities()
        : base("name=DBMechanicEntities")
    {
    }
 
    public static DBMechanicEntities GetContext()
    {
        if ( _context == null )
            _context = new DBMechanicEntities();
        return _context;
    }
 
АВТОРИЗАЦИЯ
        private void AuthorizationButton_Click(object sender, RoutedEventArgs e)
        {
            string username = tbLogin.Text;
            string password = pbPassword.Password;
            var user = dbdse.Сотрудники.FirstOrDefault(u => u.Логин == username && u.Пароль == password);

            if (user != null)
            {
               if (user.Должность == "Оператор")
                {
                    MessageBox.Show("Авторизация успешна!");
                    _Windows.Operator operatorwindow = new Operator();
                    operatorwindow.Show();
                    this.Close();
                }
                if (user.Должность == "Заместитель начальника")
                {
                    MessageBox.Show("Авторизация успешна!");
                    _Windows.Chief chiefwindow = new Chief();
                    chiefwindow.Show();
                    this.Close();
                }
                if (user.Должность == "Начальник охраны")
                {
                    MessageBox.Show("Авторизация успешна!");
                    _Windows.Chief chiefwindow = new Chief();
                    chiefwindow.Show();
                    this.Close();
                }
            }
            else
            {
                MessageBox.Show("Неверное имя пользователя или пароль!");
            }
        }

Таблица
<DataGrid Name="dg" Height="228" Width="772" Canvas.Left="14" Canvas.Top="188" HorizontalAlignment="Center" VerticalAlignment="Top" AutoGenerateColumns="False">
    <DataGrid.Columns>
        <DataGridTextColumn x:Name="d1" Header="№" Binding="{Binding Номер_заказа}" Width="*"/>
        <DataGridTextColumn x:Name="d2" Header="Номер клиента" Binding="{Binding Телефон_клиента}" Width="*"/>
        <DataGridTextColumn x:Name="d3" Header="Гос. номер" Binding="{Binding Гос_номер}" Width="*"/>
        <DataGridTextColumn x:Name="d4" Header="Марка" Binding="{Binding Марка_авто}" Width="*"/>
        <DataGridTextColumn x:Name="d5" Header="Модель" Binding="{Binding Модель_авто}" Width="*"/>
        <DataGridTextColumn x:Name="d6" Header="Год выпуска" Binding="{Binding Год_выпуска}" Width="*"/>
        <DataGridTextColumn x:Name="d7" Header="Кол-во повреждений" Binding="{Binding Количество_повреждений}" Width="*"/>
        <DataGridTextColumn x:Name="d8" Header="Описание повреждений" Binding="{Binding Описание_повреждений}" Width="*"/>
        <DataGridTextColumn x:Name="d9" Header="Заказ детали" Binding="{Binding Заказ_детали}" Width="*"/>
        <DataGridTextColumn x:Name="d10" Header="Жидкости" Binding="{Binding Жидкости_авто}" Width="*"/>
        <DataGridTextColumn x:Name="d11" Header="Дата заказа" Binding="{Binding Дата_заказа}" Width="*"/>
        <DataGridTextColumn x:Name="d12" Header="Статус заказа" Binding="{Binding Статус_заказа}" Width="*"/>
        <DataGridTextColumn x:Name="d13" Header="Номер пользователя" Binding="{Binding Номер_пользователя}" Width="*"/>
        <DataGridTextColumn x:Name="d14" Header="Итог стоимость" Binding="{Binding Итоговая_стоимость}" Width="*"/>
    </DataGrid.Columns>
</DataGrid>

С# для синхронизации с БД
dg.ItemsSource = DBMechanicEntities.GetContext().Заказы.ToList();

ПЕРЕХОД МЕЖДУ ОКНАМИ
frWork.Navigate(new _Pages.Dislocations());
Окно добавления и редактирования (основной метод)
            var disl = _DataBase.dsEntities.GetContext().Дислокации.FirstOrDefault(i => i.Номер_дислокации == editClass.id);
            InitializeComponent();
            if (editClass.status == false)
            {
                cbDislocationStation.Text = disl.Станция_дислокации.ToString();
                tbDateLastOperation.Text = disl.Дата_последней_операции.ToString();
                tbLastOperation.Text = disl.Последняя_операция.ToString();
                tbIdPark.Text = disl.Номер_парка.ToString();
                tbIdWay.Text = disl.Номер_пути.ToString();
                tbIdTrain.Text = disl.Номер_поезда.ToString();
                tbIdVan.Text = disl.Номер_вагона.ToString();
                tbIdCargo.Text = disl.Номер_груза.ToString();
                cbDestinationStation.Text = disl.Станция_назначения.ToString();
            }

Добавление - Редактирование
private void SaveButton_Click(object sender, RoutedEventArgs e)
{
    try
    {
        if (editClass.status == false)
        {
            var cargo = _DataBase.dsEntities.GetContext().Грузы.FirstOrDefault(i => i.Номер_груза == editClass.id);
            cargo.Номер_груза = int.Parse(tbIdCargo.Text);
            cargo.Описание = tbDescription.Text;
            cargo.Вес = Convert.ToDouble(tbWeight.Text);
            _DataBase.dsEntities.GetContext().SaveChanges();
            MessageBox.Show("Успешное редактирование");
        }
        else
        {
            _DataBase.dsEntities context = new _DataBase.dsEntities();
            var cargo_add = new _DataBase.Грузы();
            cargo_add.Номер_груза = int.Parse(tbIdCargo.Text);
            cargo_add.Описание = tbDescription.Text;
            cargo_add.Вес = Convert.ToDouble(tbWeight.Text);
            _DataBase.dsEntities.GetContext().SaveChanges();
            _DataBase.dsEntities.GetContext().Грузы.Add(cargo_add);
            _DataBase.dsEntities.GetContext().SaveChanges();
            MessageBox.Show("Успешное добавление");
        }
        Close();
    }
    catch (Exception ex)
    {
        MessageBox.Show("Ошибка! " + ex.Message);
    }
}

Код кнопок и вывода таблицы страниц:
    public Invoice()
    {
        InitializeComponent();
        dgInvoice.ItemsSource = _DataBase.dsEntities.GetContext().Накладные.ToList();
    }

    private void AddButton_Click(object sender, RoutedEventArgs e)
    {
        _Windows.InvoiceAddEdit winAdd = new _Windows.InvoiceAddEdit();
        editClass.status = true;
        winAdd.Show();
        dgInvoice.ItemsSource = _DataBase.dsEntities.GetContext().Накладные.ToList();
    }

    private void DeleteButton_Click(object sender, RoutedEventArgs e)
    {
        var remove = dgInvoice.SelectedItems.Cast<Накладные>().ToList();
        if (MessageBox.Show($"Вы точно хотите удалить {remove.Count()} количество элементов?", "Внимание!", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
        {
            try
            {
                dgInvoice.ItemsSource = _DataBase.dsEntities.GetContext().Накладные.RemoveRange(remove);
                _DataBase.dsEntities.GetContext().SaveChanges();
                MessageBox.Show("Данные успешно удалены!");
                dgInvoice.ItemsSource = _DataBase.dsEntities.GetContext().Накладные.ToList();
            }
            catch
            {
                MessageBox.Show("Ошибка!");
            }
        }
        else
        {
            MessageBox.Show("Выберите элемент или несколько элементов!");
        }
    }
private void EditButton_Click(object sender, RoutedEventArgs e)
    {
        try
        {
            var id = dgInvoice.SelectedItem as _DataBase.Накладные;
            if (id != null)
            {
                editClass.id = id.Номер_накладной;
                _Windows.InvoiceAddEdit winEdit = new _Windows.InvoiceAddEdit();
                editClass.status = false;
                winEdit.Show();
                dgInvoice.ItemsSource = _DataBase.dsEntities.GetContext().Накладные.ToList();
            }
            else { MessageBox.Show("Выберите элемент"); }

        }
        catch (Exception ex)
        {
            MessageBox.Show("Ошибка! " + ex.Message);
        }
        dgInvoice.ItemsSource = _DataBase.dsEntities.GetContext().Накладные.ToList();
    }
}

Класс editClass.cs

  internal class editClass
    {
        public static int id;
        public static bool status = true;
    }
